lang -> expr+
expr -> assign_expr|cond_expr|while_expr|input_expr|output_expr|function|function_call|return_expr|method_call

value_expr -> VAR|DIGIT|arithmetic_expr|function_call

assign_expr -> VAR ASSIGN_OP assign_value SEMICOLON
assign_value -> value_expr|TYPE|CONST_STRING

arithmetic_expr -> OPEN_PARANTHESIS? value_expr (op arithmetic_expr)* CLOSE_PARANTHESIS?
op -> PLUS | MINUS | MULTIPLY | DIVIDE

body -> OPEN_BRACKET expr+ CLOSE_BRACKET

logical_head -> OPEN_PARANTHESIS logical_expr CLOSE_PARANTHESIS
logical_expr -> value_expr LOGIC_OP value_expr

cond_expr -> cond_head body
cond_head -> IF_KW logical_head

while_expr -> while_head body
while_head -> WHILE_KW logical_head

arg_list -> value_expr (COMMA value_expr)*
method_call -> VAR DOT METHOD OPEN_PARANTHESIS arg_list? CLOSE_PARANTHESIS SEMICOLON
function -> function_head body
function_head -> VAR OPEN_PARANTHESIS arg_list? CLOSE_PARANTHESIS
return_expr -> RETURN_KW value_expr SEMICOLON
function_call -> function_head SEMICOLON

input_expr -> INPUT_KW OPEN_PARANTHESIS VAR CLOSE_PARANTHESIS SEMICOLON
output_expr -> OUTPUT_KW OPEN_PARANTHESIS output_value CLOSE_PARANTHESIS SEMICOLON
output_value -> value_expr|CONST_STRING

// TODO for, hash_set

COMMA -> ,
TYPE -> void|int|string|list|hash_set
DOT -> .
VAR -> [a-zA-z]+
ASSIGN_OP -> =
DIGIT -> 0|([1-9][0-9]*)
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVIDE -> /
LOGIC_OP -> >|<|==|>=|<=
CONST_STRING -> "[^"]*"
SEMICOLON -> ;

OPEN_PARENTHESIS -> (
CLOSE_PARENTHESIS -> )
OPEN_BRACKET -> {
CLOSE_BRACKET -> }

IF_KW = if
WHILE_KW = while
INPUT_KW -> input
OUTPUT_KW -> print
RETURN_KW -> return
METHOD -> add|remove|get|set